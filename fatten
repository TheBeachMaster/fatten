#!/usr/bin/env bash

_program()
{
	core_usesIn core/variable array
	
	fatten_discoverPackageManagers()
	{
		_fatten_discoverPackageManagers_callback()
		{
			if [ ! -s "$filePath" ]; then
				return 0
			fi
			local lengthOf=".functions"
			fatten_allPackageManagers="$fatten_allPackageManagers $(core_variable_allButLastN "$(core_compatibility_basename "$filePath")" ${#lengthOf})"
		}
		
		fatten_allPackageManagers=''
		core_path_iterateOverFolderPath "$_program_libPath"/"$core_libraryName"/core/dependency/check _fatten_discoverPackageManagers_callback
	}
	
	# We're supposed to use git's "low-level plumbing" and avoid 'porcelain' commands. Given how hideous git's syntax is, life is too short. We'll fix the bugs that arise instead.
	core_dependency_requires '*' git awk sort date md5sum
	fatten_obtainGitDetails()
	{
		pushd "$fatten_repositoryPath"
		
			if [ ! -d '.git' ]; then
				core_exitError "--repository-path '$fatten_repositoryPath' is not a git repository"
			fi
			
			fatten_branch="$(git branch | awk '/^\*/ {print $2}')"
			fatten_commit="$(git log -n 1 --format='%H')"
			fatten_authors="$(git log --format='%aN' | sort -u | awk 'NR==1 {ORS=""; print $0}; NR>1 {ORS=""; print ", " $0}')"
			local iso8601Date="$(git log -n 1 --format='%ci')"
			fatten_version="$(date -d "$iso8601Date" '+%Y.%m.%d.%H.%M')"
			
			if [ "$fatten_force" = 'no' ]; then
				local pendingChanges="$(git diff --minimal --no-color --name-status)"
				if [ -n "$pendingChanges" ]; then
					core_exitError $core_commandLine_exitCode_DATAERR "Pending changes in --repository-path '$fatten_repositoryPath'"
				fi
				fatten_packageOrBuild="$fatten_branch commit $fatten_commit variant $(git diff --minimal --no-color | md5sum | awk '{print $1}')"
			else
				fatten_packageOrBuild="$fatten_branch commit $fatten_commit"
			fi
			
		popd
	}
	
	fatten_createTemporaryFolder()
	{
		local TMP_FOLDER
		core_temporaryFiles_newFolderToRemoveOnExit
		fatten_temporaryFolderPath="$TMP_FOLDER"
	}
	
	fatten_createOutputFolder()
	{
		mkdir -m 0755 -p "$fatten_outputPath" || core_exitError $core_commandLine_exitCode_CANTCREAT "Can not create --output-path '$fatten_outputPath'"
		pushd "$fatten_outputPath"
		
			fatten_outputPath="$(pwd -P)"
		
		popd
	}
	
	core_dependency_requires '*' head bash chmod
	core_snippet_embed raw bootstrap1 bootstrap2
	fatten_fattenProgram()
	{
		local fatten_originalProgram="$core_variable_array_element"
		local fatten_programPath="$(core_compatibility_dirname "$fatten_originalProgram")"
		local fatten_programName="$(core_compatibility_basename "$fatten_originalProgram")"
		local fatten_fattenedProgram="$fatten_outputPath"/"$fatten_programName"
		local fatten_bootstrapProgram="$fatten_temporaryFolderPath"/"$fatten_programName"
		local fatten_shebang="$(head -n 1 "$fatten_originalProgram")"
		
		core_snippet_retrieveAndSourceAsHereDoc bootstrap1 >"$fatten_bootstrapProgram"
		core_snippet_retrieve bootstrap2 yes "$fatten_bootstrapProgram"
		
		chmod +x "$fatten_bootstrapProgram"
		"$fatten_bootstrapProgram"
		
		chmod +x "$fatten_fattenedProgram"
	}

	fatten()
	{
		fatten_discoverPackageManagers
		fatten_obtainGitDetails
		fatten_createTemporaryFolder
		fatten_createOutputFolder
		
		core_variable_array_iterate fatten_programs fatten_fattenProgram
	}
}

_program_name='fatten'
_program_namespace='fatten'
_program_version='unversioned'
_program_package_or_build=''
_program_copyright='(c) 2014 Raphael Cohn'
_program_licence='MIT'
_program_written_by='Raphael Cohn'
_program_path="$([ "${_program_fattening_program_path+set}" = 'set' ] && printf '%s\n' "$_program_fattening_program_path" || ([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}"))"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='fatten'

_program_commandLine_parseInitialise()
{
	# Needed in help text
	_program_default_etcPath='/etc'
	_program_default_libPath='/usr/lib'
	_program_default_varPath='/var'
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]... -- [PROGRAMS]..."
	_program_commandLine_helpMessage_description="Fattens shellfire executables so they standalone."
	_program_commandLine_helpMessage_options="
  -r, --repository-path PATH  Path to folder containing a PROGRAM
  -e, --etc-path PATH         Path to install fir etc folder [Default ${_program_default_etcPath}]
  -l, --lib-path PATH         Path to lib folder [Default ${_program_default_libPath}]
  -l, --var-path PATH         Path to var folder [Default ${_program_default_varPath}]
  -f, --force                 Force fattening even if there are uncommited changes
  -o, --output-path PATH      Path to folder (created in necessary) for fattened PROGRAM"
    _program_commandLine_helpMessage_optionsSpacing='     '
	_program_commandLine_helpMessage_configurationKeys="
  fatten_etcPath  Equivalent to --etc-path
  fatten_libPath  Equivalent to --lib-path
  fatten_varPath  Equivalent to --var-path
  fatten_repositoryPath  Equivalent to --repository-path
  fatten_force  Equivalent to --force (specify yes or no)
  fatten_outputPath  Equivalent to --output-path
"
	_program_commandLine_helpMessage_examples="
  ${_program_name} -r git-repo/bin -- minor-test
"
}

_program_commandLine_optionExists()
{
	case "$optionName" in
		
		r|repository-path)
			echo 'yes-argumented'
		;;
		
		e|etc-path)
			echo 'yes-argumented'
		;;
		
		f|force)
			echo 'yes-argumentless'
		;;
		
		l|lib-path)
			echo 'yes-argumented'
		;;
		
		l|var-path)
			echo 'yes-argumented'
		;;
		
		o|output-path)
			echo 'yes-argumented'
		;;
		
		*)
			echo 'no'
		;;
		
	esac
}

_program_commandLine_processOptionWithoutArgument()
{
	case "$optionName" in
		
		f|force)
			fatten_force='yes'
		;;
		
	esac
}

_program_commandLine_processOptionWithArgument()
{
	case "$optionName" in
		
		r|repository-path)
			core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_repositoryPath="$optionValue"
		;;
		
		e|etc-path)
			core_validate_pathNotEmpty $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_etcPath="$optionValue"
		;;
		
		l|lib-path)
			core_validate_pathNotEmpty $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_libPath="$optionValue"
		;;
		
		l|var-path)
			core_validate_pathNotEmpty $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_varPath="$optionValue"
		;;
		
		o|output-path)
			core_validate_pathNotEmpty $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_outputPath="$optionValue"
		;;
		
		*)
			echo 'no'
		;;
		
	esac
}

_program_commandLine_handleNonOptions()
{
	if [ $# -eq 0 ]; then
		core_commandLine_exitBadCommandLine "No programs specified"
	fi
	local fatten_program
	for fatten_program in "$@"
	do
		core_validate_filePathReadableAndExecutableAndNotEmpty $core_commandLine_exitCode_USAGE 'non-options' 'programs' "$fatten_program"
		
		cd -P "$(core_compatibility_dirname "$fatten_program")" 1>/dev/null
		
			fatten_program="$(pwd)"/"$(core_compatibility_basename "$fatten_program")"
		
		cd - >/dev/null
		
		core_variable_array_append fatten_programs "$fatten_program"
	done
}

_program_commandLine_validate()
{
	local optionNameIncludingHyphens
	local optionValue
	
	if core_variable_isUnset fatten_force; then
		fatten_force='no'
	else
		core_validate_isBoolean $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_force' "$fatten_force"
	fi
	
	if core_variable_isUnset fatten_repositoryPath; then
		core_commandLine_exitBadCommandLine "The option '--repository-path (-r)' must be specified"
	else
		core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_repositoryPath' "$fatten_repositoryPath"
	fi
	
	if core_variable_isUnset fatten_etcPath; then
		fatten_etcPath="$_program_default_etcPath"
	else
		core_validate_pathNotEmpty $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_etcPath' "$fatten_etcPath"
	fi
	
	if core_variable_isUnset fatten_libPath; then
		fatten_libPath="$_program_default_libPath"
	else
		core_validate_pathNotEmpty $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_libPath' "$fatten_libPath"
	fi
	
	if core_variable_isUnset fatten_varPath; then
		fatten_varPath="$_program_default_varPath"
	else
		core_validate_pathNotEmpty $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_varPath' "$fatten_varPath"
	fi
	
	if core_variable_isUnset fatten_outputPath; then
		core_commandLine_exitBadCommandLine "The option '--output-path (-o)' must be specified"
	else
		core_validate_pathNotEmpty $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_outputPath' "$fatten_outputPath"
	fi
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
