#!/usr/bin/env bash

_program()
{
	core_usesIn core variable variable/array
	core_usesIn fatten
	core_usesIn fatten validate
	
	fatten()
	{
		fatten_discoverPackageManagers
		fatten_obtainGitDetails
		fatten_createTemporaryFolder
		fatten_createOutputFolder
		fatten_fattenPrograms
	}
}

_program_name='fatten'
_program_namespace='fatten'
_program_version='unversioned'
_program_package_or_build=''
_program_copyright='(c) 2014 Raphael Cohn'
_program_licence='MIT'
_program_written_by='Raphael Cohn'
_program_path="$([ "${_program_fattening_program_path+set}" = 'set' ] && printf '%s\n' "$_program_fattening_program_path" || ([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}"))"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='fatten'

_program_commandLine_parseInitialise()
{
	# Needed in help text
	_program_default_etcPath='/etc'
	_program_default_libPath='/usr/lib'
	_program_default_varPath='/var'
	_program_default_corePath="$_program_libPath"/"$core_libraryName"/core
	
	# Needed when handling non-options
	if core_variable_isUnset fatten_repositoryPath; then
		fatten_repositoryPath="$(pwd)"
	fi
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]... -- [PROGRAMS]..."
	_program_commandLine_helpMessage_description="Fattens shellfire executables so they standalone."
	_program_commandLine_helpMessage_options="
  -r, --repository-path PATH  Path to a Git repository root containing a PROGRAM
                              Defaults to pwd:-
                              $(pwd)
  -e, --etc-path PATH         Path to install etc folder [Default ${_program_default_etcPath}]
  -l, --lib-path PATH         Path to install lib folder [Default ${_program_default_libPath}]
  -p, --var-path PATH         Path to install var folder [Default ${_program_default_varPath}]
  -f, --force                 Force fattening even if there are uncommited changes
  -o, --output-path PATH      Path to folder (created if necessary) for fattened PROGRAM
                              Defaults to pwd:-
                              $(pwd)
  -c, --core-path  PATH       Path to shellfire core
                              Defaults to:-
                              ${_program_default_corePath}"
    _program_commandLine_helpMessage_optionsSpacing='     '
	_program_commandLine_helpMessage_configurationKeys="
  fatten_etcPath         Equivalent to --etc-path
  fatten_libPath         Equivalent to --lib-path
  fatten_varPath         Equivalent to --var-path
  fatten_repositoryPath  Equivalent to --repository-path
  fatten_force           Equivalent to --force (specify yes or no)
  fatten_outputPath      Equivalent to --output-path
  fatten_corePath        Equivalent to --core-path
  
  PROGRAM is an executable shellfire script, with a path
  relative to --repository-path.
"
	_program_commandLine_helpMessage_examples="
  ${_program_name} -r git-repo/bin -- minor-test
"
}

_program_commandLine_optionExists()
{
	case "$optionName" in
		
		r|repository-path)
			echo 'yes-argumented'
		;;
		
		e|etc-path)
			echo 'yes-argumented'
		;;
		
		f|force)
			echo 'yes-argumentless'
		;;
		
		l|lib-path)
			echo 'yes-argumented'
		;;
		
		p|var-path)
			echo 'yes-argumented'
		;;
		
		o|output-path)
			echo 'yes-argumented'
		;;
		
		c|core-path)
			echo 'yes-argumented'
		;;
		
		*)
			echo 'no'
		;;
		
	esac
}

_program_commandLine_processOptionWithoutArgument()
{
	case "$optionName" in
		
		f|force)
			fatten_force='yes'
		;;
		
	esac
}

_program_commandLine_processOptionWithArgument()
{
	case "$optionName" in
		
		r|repository-path)
			fatten_validate_repositoryPath $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_repositoryPath="$optionValue"
		;;
		
		e|etc-path)
			core_validate_pathNotEmpty $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_etcPath="$optionValue"
		;;
		
		l|lib-path)
			core_validate_pathNotEmpty $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_libPath="$optionValue"
		;;
		
		l|var-path)
			core_validate_pathNotEmpty $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_varPath="$optionValue"
		;;
		
		o|output-path)
			core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_outputPath="$optionValue"
		;;
		
		c|core-path)
			core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			fatten_corePath="$optionValue"
		;;
		
		*)
			echo 'no'
		;;
		
	esac
}

_program_commandLine_handleNonOptions()
{
	if [ $# -eq 0 ]; then
		core_commandLine_exitBadCommandLine "No programs specified"
	fi
	
	# Force repositoryPath to be absolute
	pushd "$fatten_repositoryPath"
	
	local fatten_program
	local resolvedPath
	for fatten_program in "$@"
	do
		if core_variable_startsWith "$fatten_program" '/'; then
			core_commandLine_exitBadCommandLine "PROGRAM '$fatten_program' is an absolute path. Paths to PROGRAMs must be relative to --repository-path so that we can enforce they are built against that repository's metadata."
		fi
		resolvedPath="$fatten_repositoryPath"/"$fatten_program"
		core_validate_filePathReadableAndExecutableAndNotEmpty $core_commandLine_exitCode_USAGE 'non-options' "PROGRAM ('$fatten_program')" "$resolvedPath"
		core_variable_array_append fatten_programs "$resolvedPath"
	done
}

_program_commandLine_validate()
{
	local optionNameIncludingHyphens
	local optionValue
	
	if core_variable_isUnset fatten_force; then
		fatten_force='no'
	else
		core_validate_isBoolean $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_force' "$fatten_force"
	fi
	
	if core_variable_isSet fatten_repositoryPath; then
		fatten_validate_repositoryPath $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_repositoryPath' "$fatten_repositoryPath"
	fi
	
	if core_variable_isUnset fatten_etcPath; then
		fatten_etcPath="$_program_default_etcPath"
	else
		core_validate_pathNotEmpty $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_etcPath' "$fatten_etcPath"
	fi
	
	if core_variable_isUnset fatten_libPath; then
		fatten_libPath="$_program_default_libPath"
	else
		core_validate_pathNotEmpty $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_libPath' "$fatten_libPath"
	fi
	
	if core_variable_isUnset fatten_varPath; then
		fatten_varPath="$_program_default_varPath"
	else
		core_validate_pathNotEmpty $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_varPath' "$fatten_varPath"
	fi
	
	if core_variable_isUnset fatten_outputPath; then
		fatten_outputPath="$(pwd)"
	else
		core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_CONFIG 'configuration setting' 'fatten_outputPath' "$fatten_outputPath"
	fi
	
	if core_variable_isUnset fatten_corePath; then
		fatten_corePath="$_program_default_corePath"
	else
		core_validate_folderPathReadableAndSearchable $core_commandLine$core_commandLine_exitCode_CONFIG_exitCode_USAGE 'configuration setting' 'fatten_corePath' "$fatten_corePath"
	fi
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
