core_init_shell_rexecing=$$
_program_fattening=1

_program_fattening_declaredNames=''
_program_fattening_declares()
{	
	local declares
	local alreadyDeclared
	local IFS=' '
	for declares in "$@"
	do
		for alreadyDeclared in $_program_fattening_declaredNames
		do
			if [ "$alreadyDeclared" = "$declares" ]; then
				return 0
			fi
		done
		_program_fattening_declaredNames="$_program_fattening_declaredNames $declares"
		
		local variableNameInitialised="${declares}_initialised"
		if core_variable_isSet "$variableNameInitialised"; then
			_program_fattening_declaredNames="$_program_fattening_declaredNames $variableNameInitialised"
		fi
	done
	
}

cd "$_program_fattening_program_path" 1>/dev/null
. "$_program_fattening_originalProgram"

if core_variable_isUnset _program_namespace; then
	_program_namespace="$_program_name"
fi
if core_variable_isUnset _program_ignore_dependencies; then
	_program_ignore_dependencies=no
fi

# Look up license details for use in header
_core_commandLine_versionMessageLookup
_program_fattening_declares \
	_program_licence_description \
	_program_text \
	_program_openSourceLicensed \
	_program_permission \
	_program_warranty

# Shebang
printf '%s\n' "$_program_fattening_shebang"

# Header Comments
printf '# \n'
printf '# %s\n' "$_program_fattening_program_name $_program_fattening_program_version"
printf '# %s\n' "$_program_fattening_program_package_or_build"
printf '# %s\n' "Copyright $_program_copyright."
if [ $_program_openSourceLicensed -eq 1 ]; then
	printf '# %s\n' "Licensed under the $_program_licence_description"
else
	printf '# %s\n' "$_program_licence_description"
fi
printf '# %s\n' "$_program_permission"
printf '# %s\n' "$_program_warranty"
printf '# %s\n' "Written by $_program_fattening_program_written_by."
printf '# %s\n' "Fattened by shellfire (https://github.com/shellfire-dev/shellfire)."
printf '# \n'

# _program_* variables
_program_fattening_outputVariables()
{
	local variableName
	local fattenedVariableName
	local core_variable_indirectValue_result
	for variableName in "$@"
	do
		fattenedVariableName="_program_fattening${variableName}"
		core_variable_indirectValue "$fattenedVariableName"
		printf "%s='%s'\n" "$variableName" "$core_variable_indirectValue_result"
	done
}

# _program_path deliberately omitted
_program_fattening_declares \
	_program_namespace \
	_program_ignore_dependencies \
	_program_copyright \
	_program_licence \
	_program_entrypoint

_program_fattening_outputVariables \
	_program_name \
	_program_version \
	_program_package_or_build \
	_program_written_by \
	_program_libPath \
	_program_etcPath

# Global Variables
IFS=' '
set -o noglob
for _program_fattening_declaredName in $_program_fattening_declaredNames
do
	declare -p "$_program_fattening_declaredName" | sed 's/^declare -- //g'
done

# Dependencies
_program_fattening_declaredDependencyNames=''
while IFS="$core_variable_array_delimiter" read -r packageManager programName
do
	if [ -z "$packageManager" ]; then
		break
	fi
	
	if [ "$packageManager" = '*' ]; then
		packageManagers="$_program_fattening_allPackageManagers"
	else
		packageManagers="$packageManager"
	fi
	
	IFS=' '
	for packageManager in $packageManagers
	do	
		for externalDataSourceFolderName in "$_program_name" "$core_libraryName"
		do
			externalDataSourceFilePath="$_program_etcPath"/"$externalDataSourceFolderName"/paths.d/"$packageManager"/"$programName".path
			if core_path_isReadableNonEmptyFilePath "$externalDataSourceFilePath"; then
				
				_program_fattening_declaredDependencyName="_core_dependency_internalDataSource_${packageManager}_${programName}"
				for existingName in $_program_fattening_declaredDependencyNames
				do
					if [ "$existingName" = "$_program_fattening_declaredDependencyName" ]; then
						break 2
					fi
				done
				
				printf '%s' "${_program_fattening_declaredDependencyName}='"
				printf '%s' "$(head -n 1 "$externalDataSourceFilePath")"
				printf '%s\n' "'"
				
				_program_fattening_declaredDependencyNames="$_program_fattening_declaredDependencyNames $_program_fattening_declaredDependencyName"
				break
			fi
		done
	done
done <<-EOG
	${_core_dependency_requires}
EOG

# Get rid of definitions before outputing functions
core_dependency_declares()
{
	:
}
_core_commandLine_versionMessageLookup()
{
	:
}
_program()
{
	:
}
unset _program
unset _program_fattening_declares
unset _program_fattening_outputVariables

# Functions
declare -f

# Execute
printf '%s\n' 'core_init_main "$@"'
