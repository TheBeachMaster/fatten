# This file is part of shellfire fatten. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of shellfire swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of shellfire fatten. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


core_init_shell_rexecing=$$
_program_fattening=1

_program_fattening_declaredNames=''
_program_fattening_declares()
{	
	local declares
	local alreadyDeclared
	local IFS=' '
	for declares in "$@"
	do
		for alreadyDeclared in $_program_fattening_declaredNames
		do
			if [ "$alreadyDeclared" = "$declares" ]; then
				return 0
			fi
		done
		_program_fattening_declaredNames="$_program_fattening_declaredNames $declares"
	done	
}

cd "$_program_fattening_program_path" 1>/dev/null
. "$_program_fattening_originalProgram"

if core_variable_isUnset _program_namespace; then
	_program_namespace="$_program_name"
fi
_program_fattening_declares _program_namespace

if core_variable_isUnset _program_ignoreDependencies; then
	_program_ignoreDependencies="$_program_fattening_program_ignoreDependencies"
elif core_variable_isTrue "$_program_fattening_program_ignoreDependencies"; then
	_program_ignoreDependencies="$_program_fattening_program_ignoreDependencies"
fi
_program_fattening_declares _program_ignoreDependencies

if core_variable_isUnset _program_copyrightAndLicenseStatement; then
	_program_copyrightAndLicenseStatement="$_program_fattening_program_copyrightAndLicenseStatement"
fi
_program_fattening_declares _program_copyrightAndLicenseStatement

# Shebang
printf '%s\n' "$_program_fattening_shebang"

# Header Comments
printf '# \n'
printf '# %s\n' "$_program_fattening_program_name ($_program_fattening_program_package_or_build) $_program_fattening_program_version"
printf '# %s\n' "Created using shellfire (https://github.com/shellfire-dev/shellfire)."
while IFS='' read -r copyrightAndLicenseStatementLine
do
	printf '# %s\n' "$copyrightAndLicenseStatementLine"
done <<-EOF
	${_program_copyrightAndLicenseStatement}
EOF
printf '# \n'

# _program_* variables
_program_fattening_outputVariables()
{
	local variableName
	local fattenedVariableName
	local core_variable_indirectValue_result
	for variableName in "$@"
	do
		fattenedVariableName="_program_fattening${variableName}"
		core_variable_indirectValue "$fattenedVariableName"
		printf "%s='%s'\n" "$variableName" "$core_variable_indirectValue_result"
	done
}

# _program_path deliberately omitted
_program_fattening_declares \
	_program_namespace \
	_program_ignore_dependencies \
	_program_entrypoint

_program_fattening_outputVariables \
	_program_name \
	_program_version \
	_program_package_or_build \
	_program_libPath \
	_program_etcPath \
	_program_varPath \
	_program_binPath

# Global Variables
IFS=' '
set -o noglob
for _program_fattening_declaredName in $_program_fattening_declaredNames
do
	declare -p "$_program_fattening_declaredName" | sed 's/^declare -- //g'
done

IFS=' '
for packageManager in $core_dependency_check_packageManagersWithPaths
do
	core_variable_unset _core_dependency_internalDataSource_${packageManager}
	core_variable_setVariable _core_dependency_internalDataSource_${packageManager} ''
done

# Dependencies
core_variable_array_initialise _program_fattening_alreadyIncorporatedDependencies
while IFS=' ' read -r packageManager programName
do
	if [ -z "$packageManager" ]; then
		break
	fi
	
	if [ "$packageManager" = '*' ]; then
		packageManagers="$core_dependency_check_packageManagersWithPaths"
	else
		packageManagers="$packageManager"
	fi
	
	IFS=' '
	for packageManager in $packageManagers
	do	
		for externalDataSourceFolderName in "$_program_name" "$core_libraryName"
		do
			externalDataSourceFilePath="$_program_etcPath"/"$externalDataSourceFolderName"/paths.d/"$packageManager"/"$programName".path
			if core_path_isReadableNonEmptyFilePath "$externalDataSourceFilePath"; then
				if ! core_variable_array_contains _program_fattening_alreadyIncorporatedDependencies "$packageManager"/"$programName".path; then
					core_variable_indirectValue _core_dependency_internalDataSource_${packageManager}
					core_variable_setVariable _core_dependency_internalDataSource_${packageManager} "${core_variable_indirectValue_result}$(<"$externalDataSourceFilePath")
"
					break
				fi
			fi
		done
	done
done <<-EOG
	${_core_dependency_requires}
EOG

IFS=' '
for packageManager in $core_dependency_check_packageManagersWithPaths
do
	declare -p "_core_dependency_internalDataSource_${packageManager}" | sed 's/^declare -- //g'
done


# Get rid of definitions before outputing functions
core_dependency_declares()
{
	:
}
_program()
{
	:
}
unset _program
unset _program_fattening_declares
unset _program_fattening_outputVariables

# Functions
declare -f

# Execute
printf '%s\n' 'core_init_main "$@"'
