# This file is part of shellfire fatten. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/fatten/master/COPYRIGHT. No part of shellfire fatten, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright © 2014-2015 The developers of shellfire fatten. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/fatten/master/COPYRIGHT.


# This file is part of shellfire fatten. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/fatten/master/COPYRIGHT. No part of shellfire fatten, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright © 2014-2015 The developers of shellfire fatten. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/fatten/master/COPYRIGHT.


# We're supposed to use git's "low-level plumbing" and avoid 'porcelain' commands. Given how hideous git's syntax is, life is too short. We'll fix the bugs that arise instead.
core_dependency_requires '*' git sort awk date md5sum
fatten_obtainGitDetails()
{
	pushd "$fatten_repositoryPath"
		
		fatten_branch="$(git branch | awk '/^\*/ {print $2}')"
		fatten_commit="$(git log -n 1 --format='%H')"
		fatten_authors="$(git log --format='%aN' | sort -u | awk 'NR==1 {ORS=""; print $0}; NR>1 {ORS=""; print ", " $0}')"
		local iso8601Date="$(git log -n 1 --format='%ci')"
		fatten_version="$(date -d "$iso8601Date" '+%Y.%m%d.%H%M')"

		local pendingChanges="$(git diff --minimal --no-color --name-status)"
		if [ -n "$pendingChanges" ]; then
			if [ "$fatten_force" = 'no' ]; then
				core_exitError $core_commandLine_exitCode_DATAERR "Pending changes in --repository-path '$fatten_repositoryPath'"
			fi
			fatten_packageOrBuild="Commit $fatten_commit Branch $fatten_branch Variant $(git diff --minimal --no-color | md5sum | awk '{print $1}')"
		else
			fatten_packageOrBuild="Commit $fatten_commit Branch $fatten_branch"
		fi
	popd
}

fatten_createTemporaryFolder()
{
	local TMP_FOLDER
	core_temporaryFiles_newFolderToRemoveOnExit
	fatten_temporaryFolderPath="$TMP_FOLDER"
}

fatten_createOutputFolder()
{
	mkdir -m 0755 -p "$fatten_outputPath" || core_exitError $core_commandLine_exitCode_CANTCREAT "Can not create --output-path '$fatten_outputPath'"
	pushd "$fatten_outputPath"
	
		fatten_outputPath="$(pwd -P)"
	
	popd
}

_fatten_realProgramLicenceDescription()
{
	case "$_program_licence" in
		
		public-domain|unlicensed|licensed)
			return 0
		;;
		
	esac
		
	if [ "$_program_licence_description" != "$(core_commandLine_genericOpenSourceLicenceDescription)" ]; then
		return 0
	fi
	
	
	local afterHeader=0
	local spdxIdentifier
	local spdxName
	local fedoraIdentifier
	while IFS="$(printf '\t')" read -r spdxIdentifier spdxName fedoraIdentifier
	do
		if [ $afterHeader -eq 0 ]; then
			afterHeader=1
			continue
		fi
		
		if [ "$spdxIdentifier" = "$_program_licence" ]; then
			break
		fi
		
	done
	
	core_message WARN "The SPDX identifier '$_program_licence' for _program_licence is unrecognised."
}

fatten_fattenPrograms()
{
	core_variable_array_iterate fatten_programs fatten_fattenProgram
}

core_dependency_requires '*' mkdir head bash chmod
core_snippet_embed raw bootstrap1 bootstrap2 licences
fatten_fattenProgram()
{
	local fatten_originalProgram="$core_variable_array_element"

	local fatten_programPath="$(core_compatibility_dirname "$fatten_originalProgram")"
	local fatten_programName="$(core_compatibility_basename "$fatten_originalProgram")"
	local fatten_fattenedProgramParentPath="${fatten_outputPath}${fatten_binPath}"
	local fatten_fattenedProgram="$fatten_fattenedProgramParentPath"/"$fatten_programName"
	local fatten_bootstrapProgram="$fatten_temporaryFolderPath"/"$fatten_programName"
	local fatten_shebang="$(head -n 1 "$fatten_originalProgram")"
	
	if [ -f "$fatten_bootstrapProgram" ]; then
		core_message WARN "Already fattened '$fatten_fattenedProgram', skipping ($_program_name does not support fattening programs with the same name)"
		return 0
	fi
	
	if [ "$fatten_originalProgram" = "$fatten_fattenedProgram" ]; then
		core_exitError $core_commandLine_exitCode_CANTCREAT "Could not overwrite fattened program '$fatten_fattenedProgram' (did you specify an output path)?"
	fi
	
	mkdir -m 0755 -p "$fatten_fattenedProgramParentPath"
	
	# licences
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	local fatten_licencesFilePath="$TMP_FILE"
	core_snippet_retrieve licences no "$fatten_licencesFilePath"
	# restore a line feed to final line
	printf '\n' >"$fatten_licencesFilePath"
	
	core_snippet_retrieveAndSourceAsHereDoc bootstrap1 >"$fatten_bootstrapProgram"
	core_snippet_retrieve bootstrap2 yes "$fatten_bootstrapProgram"
	chmod +x "$fatten_bootstrapProgram"
	
	"$fatten_bootstrapProgram" >"$fatten_fattenedProgram"
	chmod +x "$fatten_fattenedProgram"
	
	core_message NOTICE "Fattened $fatten_programName Version $fatten_version $fatten_packageOrBuild"
}
