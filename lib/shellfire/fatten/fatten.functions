fatten_discoverPackageManagers()
{
	_fatten_discoverPackageManagers_callback()
	{
		if [ ! -s "$filePath" ]; then
			return 0
		fi
		local lengthOf=".functions"
		fatten_allPackageManagers="$fatten_allPackageManagers $(core_variable_allButLastN "$(core_compatibility_basename "$filePath")" ${#lengthOf})"
	}
	
	fatten_allPackageManagers=''
	core_path_iterateOverFolderPath "$_program_libPath"/"$core_libraryName"/core/dependency/check _fatten_discoverPackageManagers_callback
}

# We're supposed to use git's "low-level plumbing" and avoid 'porcelain' commands. Given how hideous git's syntax is, life is too short. We'll fix the bugs that arise instead.
core_dependency_requires '*' git sort awk date md5sum
fatten_obtainGitDetails()
{
	pushd "$fatten_repositoryPath"
		
		fatten_branch="$(git branch | awk '/^\*/ {print $2}')"
		fatten_commit="$(git log -n 1 --format='%H')"
		fatten_authors="$(git log --format='%aN' | sort -u | awk 'NR==1 {ORS=""; print $0}; NR>1 {ORS=""; print ", " $0}')"
		local iso8601Date="$(git log -n 1 --format='%ci')"
		fatten_version="$(date -d "$iso8601Date" '+%Y.%m.%d.%H.%M')"
		
		if [ "$fatten_force" = 'no' ]; then
			local pendingChanges="$(git diff --minimal --no-color --name-status)"
			if [ -n "$pendingChanges" ]; then
				core_exitError $core_commandLine_exitCode_DATAERR "Pending changes in --repository-path '$fatten_repositoryPath'"
			fi
			fatten_packageOrBuild="$fatten_branch commit $fatten_commit variant $(git diff --minimal --no-color | md5sum | awk '{print $1}')"
		else
			fatten_packageOrBuild="$fatten_branch commit $fatten_commit"
		fi
		
	popd
}

fatten_createTemporaryFolder()
{
	local TMP_FOLDER
	core_temporaryFiles_newFolderToRemoveOnExit
	fatten_temporaryFolderPath="$TMP_FOLDER"
}

fatten_createOutputFolder()
{
	mkdir -m 0755 -p "$fatten_outputPath" || core_exitError $core_commandLine_exitCode_CANTCREAT "Can not create --output-path '$fatten_outputPath'"
	pushd "$fatten_outputPath"
	
		fatten_outputPath="$(pwd -P)"
	
	popd
}

fatten_fattenPrograms()
{
	core_variable_array_iterate fatten_programs fatten_fattenProgram
}

core_dependency_requires '*' head bash chmod
core_snippet_embed raw bootstrap1 bootstrap2
fatten_fattenProgram()
{
	local fatten_originalProgram="$core_variable_array_element"

	local fatten_programPath="$(core_compatibility_dirname "$fatten_originalProgram")"
	local fatten_programName="$(core_compatibility_basename "$fatten_originalProgram")"
	local fatten_fattenedProgram="$fatten_outputPath"/"$fatten_programName"
	local fatten_bootstrapProgram="$fatten_temporaryFolderPath"/"$fatten_programName"
	local fatten_shebang="$(head -n 1 "$fatten_originalProgram")"
	
	if [ -f "$fatten_bootstrapProgram" ]; then
		core_message WARN "Already fattened '$fatten_fattenedProgram', skipping ($_program_name does not support fattening programs with the same name)"
		return 0
	fi
	
	if [ -f "$fatten_fattenedProgram" ]; then
		core_exitError $core_commandLine_exitCode_CANTCREAT "Could not overwrite fattened program '$fatten_fattenedProgram'"
	fi
	
	core_snippet_retrieveAndSourceAsHereDoc bootstrap1 >"$fatten_bootstrapProgram"
	core_snippet_retrieve bootstrap2 yes "$fatten_bootstrapProgram"
	
	chmod +x "$fatten_bootstrapProgram"
	"$fatten_bootstrapProgram"
	
	chmod +x "$fatten_fattenedProgram"
}
